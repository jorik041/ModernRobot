//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace ModernClient.WCFCommunicator {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActualizedInstrument", Namespace="http://schemas.datacontract.org/2004/07/ModernServer.WCFEntities")]
    public partial struct ActualizedInstrument : System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateFromField;
        
        private System.DateTime DateToField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFrom {
            get {
                return this.DateFromField;
            }
            set {
                if ((this.DateFromField.Equals(value) != true)) {
                    this.DateFromField = value;
                    this.RaisePropertyChanged("DateFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTo {
            get {
                return this.DateToField;
            }
            set {
                if ((this.DateToField.Equals(value) != true)) {
                    this.DateToField = value;
                    this.RaisePropertyChanged("DateTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCalculationInfo", Namespace="http://schemas.datacontract.org/2004/07/ModernServer.WCFEntities")]
    public partial class RemoteCalculationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int FinishedOrdersCountField;
        
        private System.Guid IdField;
        
        private bool IsDoneField;
        
        private bool IsRunningField;
        
        private bool IsWaitingField;
        
        private string NameField;
        
        private string StrategyNameField;
        
        private int WaitingOrdersCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishedOrdersCount {
            get {
                return this.FinishedOrdersCountField;
            }
            set {
                if ((this.FinishedOrdersCountField.Equals(value) != true)) {
                    this.FinishedOrdersCountField = value;
                    this.RaisePropertyChanged("FinishedOrdersCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDone {
            get {
                return this.IsDoneField;
            }
            set {
                if ((this.IsDoneField.Equals(value) != true)) {
                    this.IsDoneField = value;
                    this.RaisePropertyChanged("IsDone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning {
            get {
                return this.IsRunningField;
            }
            set {
                if ((this.IsRunningField.Equals(value) != true)) {
                    this.IsRunningField = value;
                    this.RaisePropertyChanged("IsRunning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWaiting {
            get {
                return this.IsWaitingField;
            }
            set {
                if ((this.IsWaitingField.Equals(value) != true)) {
                    this.IsWaitingField = value;
                    this.RaisePropertyChanged("IsWaiting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StrategyName {
            get {
                return this.StrategyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StrategyNameField, value) != true)) {
                    this.StrategyNameField = value;
                    this.RaisePropertyChanged("StrategyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WaitingOrdersCount {
            get {
                return this.WaitingOrdersCountField;
            }
            set {
                if ((this.WaitingOrdersCountField.Equals(value) != true)) {
                    this.WaitingOrdersCountField = value;
                    this.RaisePropertyChanged("WaitingOrdersCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimePeriods", Namespace="http://schemas.datacontract.org/2004/07/DBAccess")]
    public enum TimePeriods : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Minute = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FiveMinutes = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TenMinutes = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FifteenMinutes = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HalfHour = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hour = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculationOrder", Namespace="http://schemas.datacontract.org/2004/07/Calculator.Calculation")]
    public partial struct CalculationOrder : System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateFromField;
        
        private System.DateTime DateToField;
        
        private System.Guid IdField;
        
        private string InstrumentNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<float> ParametersField;
        
        private ModernClient.WCFCommunicator.TimePeriods PeriodField;
        
        private ModernClient.WCFCommunicator.CalculationOrderStatus StatusField;
        
        private float StopLossField;
        
        private float TotalBalanceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFrom {
            get {
                return this.DateFromField;
            }
            set {
                if ((this.DateFromField.Equals(value) != true)) {
                    this.DateFromField = value;
                    this.RaisePropertyChanged("DateFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTo {
            get {
                return this.DateToField;
            }
            set {
                if ((this.DateToField.Equals(value) != true)) {
                    this.DateToField = value;
                    this.RaisePropertyChanged("DateTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentName {
            get {
                return this.InstrumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentNameField, value) != true)) {
                    this.InstrumentNameField = value;
                    this.RaisePropertyChanged("InstrumentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<float> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ModernClient.WCFCommunicator.TimePeriods Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((this.PeriodField.Equals(value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ModernClient.WCFCommunicator.CalculationOrderStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float StopLoss {
            get {
                return this.StopLossField;
            }
            set {
                if ((this.StopLossField.Equals(value) != true)) {
                    this.StopLossField = value;
                    this.RaisePropertyChanged("StopLoss");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float TotalBalance {
            get {
                return this.TotalBalanceField;
            }
            set {
                if ((this.TotalBalanceField.Equals(value) != true)) {
                    this.TotalBalanceField = value;
                    this.RaisePropertyChanged("TotalBalance");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculationOrderStatus", Namespace="http://schemas.datacontract.org/2004/07/Calculator.Calculation")]
    public enum CalculationOrderStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Waiting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Processing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculationResult", Namespace="http://schemas.datacontract.org/2004/07/Calculator.Calculation")]
    public partial struct CalculationResult : System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<float> BalancesField;
        
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> OutDataField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> OutDataDescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<float> Balances {
            get {
                return this.BalancesField;
            }
            set {
                if ((object.ReferenceEquals(this.BalancesField, value) != true)) {
                    this.BalancesField = value;
                    this.RaisePropertyChanged("Balances");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> OutData {
            get {
                return this.OutDataField;
            }
            set {
                if ((object.ReferenceEquals(this.OutDataField, value) != true)) {
                    this.OutDataField = value;
                    this.RaisePropertyChanged("OutData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> OutDataDescription {
            get {
                return this.OutDataDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.OutDataDescriptionField, value) != true)) {
                    this.OutDataDescriptionField = value;
                    this.RaisePropertyChanged("OutDataDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFCommunicator.IWCFCommunicator")]
    public interface IWCFCommunicator {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetActualizedInstruments", ReplyAction="http://tempuri.org/IWCFCommunicator/GetActualizedInstrumentsResponse")]
        System.IAsyncResult BeginGetActualizedInstruments(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> EndGetActualizedInstruments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetAvaliableStrategies", ReplyAction="http://tempuri.org/IWCFCommunicator/GetAvaliableStrategiesResponse")]
        System.IAsyncResult BeginGetAvaliableStrategies(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetAvaliableStrategies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetRemoteCalculationsInfo", ReplyAction="http://tempuri.org/IWCFCommunicator/GetRemoteCalculationsInfoResponse")]
        System.IAsyncResult BeginGetRemoteCalculationsInfo(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> EndGetRemoteCalculationsInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/AddRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/AddRemoteCalculationResponse")]
        System.IAsyncResult BeginAddRemoteCalculation(string name, string strategyName, System.AsyncCallback callback, object asyncState);
        
        ModernClient.WCFCommunicator.RemoteCalculationInfo EndAddRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/RemoveRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/RemoveRemoteCalculationResponse")]
        System.IAsyncResult BeginRemoveRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/AddOrderToRemoteCalulation", ReplyAction="http://tempuri.org/IWCFCommunicator/AddOrderToRemoteCalulationResponse")]
        System.IAsyncResult BeginAddOrderToRemoteCalulation(System.Guid idCalculation, string insName, System.DateTime dateFrom, System.DateTime dateTo, ModernClient.WCFCommunicator.TimePeriods period, System.Collections.ObjectModel.ObservableCollection<float> parameters, float stopLoss, System.AsyncCallback callback, object asyncState);
        
        void EndAddOrderToRemoteCalulation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/StartRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/StartRemoteCalculationResponse")]
        System.IAsyncResult BeginStartRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState);
        
        void EndStartRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/StopRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/StopRemoteCalculationResponse")]
        System.IAsyncResult BeginStopRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        void EndStopRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetFinishedOrdersForRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/GetFinishedOrdersForRemoteCalculationResponse" +
            "")]
        System.IAsyncResult BeginGetFinishedOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> EndGetFinishedOrdersForRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetFinishedOrderResult", ReplyAction="http://tempuri.org/IWCFCommunicator/GetFinishedOrderResultResponse")]
        System.IAsyncResult BeginGetFinishedOrderResult(System.Guid idCalculation, System.Guid idOrder, System.AsyncCallback callback, object asyncState);
        
        ModernClient.WCFCommunicator.CalculationResult EndGetFinishedOrderResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetWaitingOrdersForRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/GetWaitingOrdersForRemoteCalculationResponse")]
        System.IAsyncResult BeginGetWaitingOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState);
        
        int EndGetWaitingOrdersForRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetFinishedOrdersCountForRemoteCalculation", ReplyAction="http://tempuri.org/IWCFCommunicator/GetFinishedOrdersCountForRemoteCalculationRes" +
            "ponse")]
        System.IAsyncResult BeginGetFinishedOrdersCountForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState);
        
        int EndGetFinishedOrdersCountForRemoteCalculation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFCommunicator/GetStrategyParametersDescription", ReplyAction="http://tempuri.org/IWCFCommunicator/GetStrategyParametersDescriptionResponse")]
        System.IAsyncResult BeginGetStrategyParametersDescription(string strategyName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetStrategyParametersDescription(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFCommunicatorChannel : ModernClient.WCFCommunicator.IWCFCommunicator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActualizedInstrumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActualizedInstrumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvaliableStrategiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvaliableStrategiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRemoteCalculationsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRemoteCalculationsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRemoteCalculationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRemoteCalculationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ModernClient.WCFCommunicator.RemoteCalculationInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ModernClient.WCFCommunicator.RemoteCalculationInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFinishedOrdersForRemoteCalculationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFinishedOrdersForRemoteCalculationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFinishedOrderResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFinishedOrderResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ModernClient.WCFCommunicator.CalculationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ModernClient.WCFCommunicator.CalculationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWaitingOrdersForRemoteCalculationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWaitingOrdersForRemoteCalculationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFinishedOrdersCountForRemoteCalculationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFinishedOrdersCountForRemoteCalculationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStrategyParametersDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStrategyParametersDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFCommunicatorClient : System.ServiceModel.ClientBase<ModernClient.WCFCommunicator.IWCFCommunicator>, ModernClient.WCFCommunicator.IWCFCommunicator {
        
        private BeginOperationDelegate onBeginGetActualizedInstrumentsDelegate;
        
        private EndOperationDelegate onEndGetActualizedInstrumentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetActualizedInstrumentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvaliableStrategiesDelegate;
        
        private EndOperationDelegate onEndGetAvaliableStrategiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvaliableStrategiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRemoteCalculationsInfoDelegate;
        
        private EndOperationDelegate onEndGetRemoteCalculationsInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetRemoteCalculationsInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndAddRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onAddRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndRemoveRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrderToRemoteCalulationDelegate;
        
        private EndOperationDelegate onEndAddOrderToRemoteCalulationDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrderToRemoteCalulationCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndStartRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onStartRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndStopRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onStopRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFinishedOrdersForRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndGetFinishedOrdersForRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onGetFinishedOrdersForRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFinishedOrderResultDelegate;
        
        private EndOperationDelegate onEndGetFinishedOrderResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetFinishedOrderResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWaitingOrdersForRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndGetWaitingOrdersForRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onGetWaitingOrdersForRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFinishedOrdersCountForRemoteCalculationDelegate;
        
        private EndOperationDelegate onEndGetFinishedOrdersCountForRemoteCalculationDelegate;
        
        private System.Threading.SendOrPostCallback onGetFinishedOrdersCountForRemoteCalculationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStrategyParametersDescriptionDelegate;
        
        private EndOperationDelegate onEndGetStrategyParametersDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetStrategyParametersDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFCommunicatorClient() {
        }
        
        public WCFCommunicatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFCommunicatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFCommunicatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFCommunicatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetActualizedInstrumentsCompletedEventArgs> GetActualizedInstrumentsCompleted;
        
        public event System.EventHandler<GetAvaliableStrategiesCompletedEventArgs> GetAvaliableStrategiesCompleted;
        
        public event System.EventHandler<GetRemoteCalculationsInfoCompletedEventArgs> GetRemoteCalculationsInfoCompleted;
        
        public event System.EventHandler<AddRemoteCalculationCompletedEventArgs> AddRemoteCalculationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveRemoteCalculationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddOrderToRemoteCalulationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartRemoteCalculationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StopRemoteCalculationCompleted;
        
        public event System.EventHandler<GetFinishedOrdersForRemoteCalculationCompletedEventArgs> GetFinishedOrdersForRemoteCalculationCompleted;
        
        public event System.EventHandler<GetFinishedOrderResultCompletedEventArgs> GetFinishedOrderResultCompleted;
        
        public event System.EventHandler<GetWaitingOrdersForRemoteCalculationCompletedEventArgs> GetWaitingOrdersForRemoteCalculationCompleted;
        
        public event System.EventHandler<GetFinishedOrdersCountForRemoteCalculationCompletedEventArgs> GetFinishedOrdersCountForRemoteCalculationCompleted;
        
        public event System.EventHandler<GetStrategyParametersDescriptionCompletedEventArgs> GetStrategyParametersDescriptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetActualizedInstruments(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActualizedInstruments(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> ModernClient.WCFCommunicator.IWCFCommunicator.EndGetActualizedInstruments(System.IAsyncResult result) {
            return base.Channel.EndGetActualizedInstruments(result);
        }
        
        private System.IAsyncResult OnBeginGetActualizedInstruments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetActualizedInstruments(callback, asyncState);
        }
        
        private object[] OnEndGetActualizedInstruments(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetActualizedInstruments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActualizedInstrumentsCompleted(object state) {
            if ((this.GetActualizedInstrumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActualizedInstrumentsCompleted(this, new GetActualizedInstrumentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActualizedInstrumentsAsync() {
            this.GetActualizedInstrumentsAsync(null);
        }
        
        public void GetActualizedInstrumentsAsync(object userState) {
            if ((this.onBeginGetActualizedInstrumentsDelegate == null)) {
                this.onBeginGetActualizedInstrumentsDelegate = new BeginOperationDelegate(this.OnBeginGetActualizedInstruments);
            }
            if ((this.onEndGetActualizedInstrumentsDelegate == null)) {
                this.onEndGetActualizedInstrumentsDelegate = new EndOperationDelegate(this.OnEndGetActualizedInstruments);
            }
            if ((this.onGetActualizedInstrumentsCompletedDelegate == null)) {
                this.onGetActualizedInstrumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActualizedInstrumentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetActualizedInstrumentsDelegate, null, this.onEndGetActualizedInstrumentsDelegate, this.onGetActualizedInstrumentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetAvaliableStrategies(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvaliableStrategies(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> ModernClient.WCFCommunicator.IWCFCommunicator.EndGetAvaliableStrategies(System.IAsyncResult result) {
            return base.Channel.EndGetAvaliableStrategies(result);
        }
        
        private System.IAsyncResult OnBeginGetAvaliableStrategies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetAvaliableStrategies(callback, asyncState);
        }
        
        private object[] OnEndGetAvaliableStrategies(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetAvaliableStrategies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvaliableStrategiesCompleted(object state) {
            if ((this.GetAvaliableStrategiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvaliableStrategiesCompleted(this, new GetAvaliableStrategiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvaliableStrategiesAsync() {
            this.GetAvaliableStrategiesAsync(null);
        }
        
        public void GetAvaliableStrategiesAsync(object userState) {
            if ((this.onBeginGetAvaliableStrategiesDelegate == null)) {
                this.onBeginGetAvaliableStrategiesDelegate = new BeginOperationDelegate(this.OnBeginGetAvaliableStrategies);
            }
            if ((this.onEndGetAvaliableStrategiesDelegate == null)) {
                this.onEndGetAvaliableStrategiesDelegate = new EndOperationDelegate(this.OnEndGetAvaliableStrategies);
            }
            if ((this.onGetAvaliableStrategiesCompletedDelegate == null)) {
                this.onGetAvaliableStrategiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvaliableStrategiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvaliableStrategiesDelegate, null, this.onEndGetAvaliableStrategiesDelegate, this.onGetAvaliableStrategiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetRemoteCalculationsInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRemoteCalculationsInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> ModernClient.WCFCommunicator.IWCFCommunicator.EndGetRemoteCalculationsInfo(System.IAsyncResult result) {
            return base.Channel.EndGetRemoteCalculationsInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetRemoteCalculationsInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetRemoteCalculationsInfo(callback, asyncState);
        }
        
        private object[] OnEndGetRemoteCalculationsInfo(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetRemoteCalculationsInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRemoteCalculationsInfoCompleted(object state) {
            if ((this.GetRemoteCalculationsInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRemoteCalculationsInfoCompleted(this, new GetRemoteCalculationsInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRemoteCalculationsInfoAsync() {
            this.GetRemoteCalculationsInfoAsync(null);
        }
        
        public void GetRemoteCalculationsInfoAsync(object userState) {
            if ((this.onBeginGetRemoteCalculationsInfoDelegate == null)) {
                this.onBeginGetRemoteCalculationsInfoDelegate = new BeginOperationDelegate(this.OnBeginGetRemoteCalculationsInfo);
            }
            if ((this.onEndGetRemoteCalculationsInfoDelegate == null)) {
                this.onEndGetRemoteCalculationsInfoDelegate = new EndOperationDelegate(this.OnEndGetRemoteCalculationsInfo);
            }
            if ((this.onGetRemoteCalculationsInfoCompletedDelegate == null)) {
                this.onGetRemoteCalculationsInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRemoteCalculationsInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetRemoteCalculationsInfoDelegate, null, this.onEndGetRemoteCalculationsInfoDelegate, this.onGetRemoteCalculationsInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginAddRemoteCalculation(string name, string strategyName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRemoteCalculation(name, strategyName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ModernClient.WCFCommunicator.RemoteCalculationInfo ModernClient.WCFCommunicator.IWCFCommunicator.EndAddRemoteCalculation(System.IAsyncResult result) {
            return base.Channel.EndAddRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginAddRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string strategyName = ((string)(inValues[1]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginAddRemoteCalculation(name, strategyName, callback, asyncState);
        }
        
        private object[] OnEndAddRemoteCalculation(System.IAsyncResult result) {
            ModernClient.WCFCommunicator.RemoteCalculationInfo retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndAddRemoteCalculation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRemoteCalculationCompleted(object state) {
            if ((this.AddRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRemoteCalculationCompleted(this, new AddRemoteCalculationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRemoteCalculationAsync(string name, string strategyName) {
            this.AddRemoteCalculationAsync(name, strategyName, null);
        }
        
        public void AddRemoteCalculationAsync(string name, string strategyName, object userState) {
            if ((this.onBeginAddRemoteCalculationDelegate == null)) {
                this.onBeginAddRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginAddRemoteCalculation);
            }
            if ((this.onEndAddRemoteCalculationDelegate == null)) {
                this.onEndAddRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndAddRemoteCalculation);
            }
            if ((this.onAddRemoteCalculationCompletedDelegate == null)) {
                this.onAddRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginAddRemoteCalculationDelegate, new object[] {
                        name,
                        strategyName}, this.onEndAddRemoteCalculationDelegate, this.onAddRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginRemoveRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveRemoteCalculation(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ModernClient.WCFCommunicator.IWCFCommunicator.EndRemoveRemoteCalculation(System.IAsyncResult result) {
            base.Channel.EndRemoveRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginRemoveRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginRemoveRemoteCalculation(id, callback, asyncState);
        }
        
        private object[] OnEndRemoveRemoteCalculation(System.IAsyncResult result) {
            ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndRemoveRemoteCalculation(result);
            return null;
        }
        
        private void OnRemoveRemoteCalculationCompleted(object state) {
            if ((this.RemoveRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveRemoteCalculationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveRemoteCalculationAsync(System.Guid id) {
            this.RemoveRemoteCalculationAsync(id, null);
        }
        
        public void RemoveRemoteCalculationAsync(System.Guid id, object userState) {
            if ((this.onBeginRemoveRemoteCalculationDelegate == null)) {
                this.onBeginRemoveRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginRemoveRemoteCalculation);
            }
            if ((this.onEndRemoveRemoteCalculationDelegate == null)) {
                this.onEndRemoveRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndRemoveRemoteCalculation);
            }
            if ((this.onRemoveRemoteCalculationCompletedDelegate == null)) {
                this.onRemoveRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveRemoteCalculationDelegate, new object[] {
                        id}, this.onEndRemoveRemoteCalculationDelegate, this.onRemoveRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginAddOrderToRemoteCalulation(System.Guid idCalculation, string insName, System.DateTime dateFrom, System.DateTime dateTo, ModernClient.WCFCommunicator.TimePeriods period, System.Collections.ObjectModel.ObservableCollection<float> parameters, float stopLoss, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrderToRemoteCalulation(idCalculation, insName, dateFrom, dateTo, period, parameters, stopLoss, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ModernClient.WCFCommunicator.IWCFCommunicator.EndAddOrderToRemoteCalulation(System.IAsyncResult result) {
            base.Channel.EndAddOrderToRemoteCalulation(result);
        }
        
        private System.IAsyncResult OnBeginAddOrderToRemoteCalulation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            string insName = ((string)(inValues[1]));
            System.DateTime dateFrom = ((System.DateTime)(inValues[2]));
            System.DateTime dateTo = ((System.DateTime)(inValues[3]));
            ModernClient.WCFCommunicator.TimePeriods period = ((ModernClient.WCFCommunicator.TimePeriods)(inValues[4]));
            System.Collections.ObjectModel.ObservableCollection<float> parameters = ((System.Collections.ObjectModel.ObservableCollection<float>)(inValues[5]));
            float stopLoss = ((float)(inValues[6]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginAddOrderToRemoteCalulation(idCalculation, insName, dateFrom, dateTo, period, parameters, stopLoss, callback, asyncState);
        }
        
        private object[] OnEndAddOrderToRemoteCalulation(System.IAsyncResult result) {
            ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndAddOrderToRemoteCalulation(result);
            return null;
        }
        
        private void OnAddOrderToRemoteCalulationCompleted(object state) {
            if ((this.AddOrderToRemoteCalulationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrderToRemoteCalulationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrderToRemoteCalulationAsync(System.Guid idCalculation, string insName, System.DateTime dateFrom, System.DateTime dateTo, ModernClient.WCFCommunicator.TimePeriods period, System.Collections.ObjectModel.ObservableCollection<float> parameters, float stopLoss) {
            this.AddOrderToRemoteCalulationAsync(idCalculation, insName, dateFrom, dateTo, period, parameters, stopLoss, null);
        }
        
        public void AddOrderToRemoteCalulationAsync(System.Guid idCalculation, string insName, System.DateTime dateFrom, System.DateTime dateTo, ModernClient.WCFCommunicator.TimePeriods period, System.Collections.ObjectModel.ObservableCollection<float> parameters, float stopLoss, object userState) {
            if ((this.onBeginAddOrderToRemoteCalulationDelegate == null)) {
                this.onBeginAddOrderToRemoteCalulationDelegate = new BeginOperationDelegate(this.OnBeginAddOrderToRemoteCalulation);
            }
            if ((this.onEndAddOrderToRemoteCalulationDelegate == null)) {
                this.onEndAddOrderToRemoteCalulationDelegate = new EndOperationDelegate(this.OnEndAddOrderToRemoteCalulation);
            }
            if ((this.onAddOrderToRemoteCalulationCompletedDelegate == null)) {
                this.onAddOrderToRemoteCalulationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrderToRemoteCalulationCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrderToRemoteCalulationDelegate, new object[] {
                        idCalculation,
                        insName,
                        dateFrom,
                        dateTo,
                        period,
                        parameters,
                        stopLoss}, this.onEndAddOrderToRemoteCalulationDelegate, this.onAddOrderToRemoteCalulationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginStartRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ModernClient.WCFCommunicator.IWCFCommunicator.EndStartRemoteCalculation(System.IAsyncResult result) {
            base.Channel.EndStartRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginStartRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginStartRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        private object[] OnEndStartRemoteCalculation(System.IAsyncResult result) {
            ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndStartRemoteCalculation(result);
            return null;
        }
        
        private void OnStartRemoteCalculationCompleted(object state) {
            if ((this.StartRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartRemoteCalculationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartRemoteCalculationAsync(System.Guid idCalculation) {
            this.StartRemoteCalculationAsync(idCalculation, null);
        }
        
        public void StartRemoteCalculationAsync(System.Guid idCalculation, object userState) {
            if ((this.onBeginStartRemoteCalculationDelegate == null)) {
                this.onBeginStartRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginStartRemoteCalculation);
            }
            if ((this.onEndStartRemoteCalculationDelegate == null)) {
                this.onEndStartRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndStartRemoteCalculation);
            }
            if ((this.onStartRemoteCalculationCompletedDelegate == null)) {
                this.onStartRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginStartRemoteCalculationDelegate, new object[] {
                        idCalculation}, this.onEndStartRemoteCalculationDelegate, this.onStartRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginStopRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopRemoteCalculation(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ModernClient.WCFCommunicator.IWCFCommunicator.EndStopRemoteCalculation(System.IAsyncResult result) {
            base.Channel.EndStopRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginStopRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginStopRemoteCalculation(id, callback, asyncState);
        }
        
        private object[] OnEndStopRemoteCalculation(System.IAsyncResult result) {
            ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndStopRemoteCalculation(result);
            return null;
        }
        
        private void OnStopRemoteCalculationCompleted(object state) {
            if ((this.StopRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopRemoteCalculationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopRemoteCalculationAsync(System.Guid id) {
            this.StopRemoteCalculationAsync(id, null);
        }
        
        public void StopRemoteCalculationAsync(System.Guid id, object userState) {
            if ((this.onBeginStopRemoteCalculationDelegate == null)) {
                this.onBeginStopRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginStopRemoteCalculation);
            }
            if ((this.onEndStopRemoteCalculationDelegate == null)) {
                this.onEndStopRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndStopRemoteCalculation);
            }
            if ((this.onStopRemoteCalculationCompletedDelegate == null)) {
                this.onStopRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginStopRemoteCalculationDelegate, new object[] {
                        id}, this.onEndStopRemoteCalculationDelegate, this.onStopRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetFinishedOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFinishedOrdersForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> ModernClient.WCFCommunicator.IWCFCommunicator.EndGetFinishedOrdersForRemoteCalculation(System.IAsyncResult result) {
            return base.Channel.EndGetFinishedOrdersForRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginGetFinishedOrdersForRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetFinishedOrdersForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        private object[] OnEndGetFinishedOrdersForRemoteCalculation(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetFinishedOrdersForRemoteCalculation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFinishedOrdersForRemoteCalculationCompleted(object state) {
            if ((this.GetFinishedOrdersForRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFinishedOrdersForRemoteCalculationCompleted(this, new GetFinishedOrdersForRemoteCalculationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFinishedOrdersForRemoteCalculationAsync(System.Guid idCalculation) {
            this.GetFinishedOrdersForRemoteCalculationAsync(idCalculation, null);
        }
        
        public void GetFinishedOrdersForRemoteCalculationAsync(System.Guid idCalculation, object userState) {
            if ((this.onBeginGetFinishedOrdersForRemoteCalculationDelegate == null)) {
                this.onBeginGetFinishedOrdersForRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginGetFinishedOrdersForRemoteCalculation);
            }
            if ((this.onEndGetFinishedOrdersForRemoteCalculationDelegate == null)) {
                this.onEndGetFinishedOrdersForRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndGetFinishedOrdersForRemoteCalculation);
            }
            if ((this.onGetFinishedOrdersForRemoteCalculationCompletedDelegate == null)) {
                this.onGetFinishedOrdersForRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFinishedOrdersForRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginGetFinishedOrdersForRemoteCalculationDelegate, new object[] {
                        idCalculation}, this.onEndGetFinishedOrdersForRemoteCalculationDelegate, this.onGetFinishedOrdersForRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetFinishedOrderResult(System.Guid idCalculation, System.Guid idOrder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFinishedOrderResult(idCalculation, idOrder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ModernClient.WCFCommunicator.CalculationResult ModernClient.WCFCommunicator.IWCFCommunicator.EndGetFinishedOrderResult(System.IAsyncResult result) {
            return base.Channel.EndGetFinishedOrderResult(result);
        }
        
        private System.IAsyncResult OnBeginGetFinishedOrderResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            System.Guid idOrder = ((System.Guid)(inValues[1]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetFinishedOrderResult(idCalculation, idOrder, callback, asyncState);
        }
        
        private object[] OnEndGetFinishedOrderResult(System.IAsyncResult result) {
            ModernClient.WCFCommunicator.CalculationResult retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetFinishedOrderResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFinishedOrderResultCompleted(object state) {
            if ((this.GetFinishedOrderResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFinishedOrderResultCompleted(this, new GetFinishedOrderResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFinishedOrderResultAsync(System.Guid idCalculation, System.Guid idOrder) {
            this.GetFinishedOrderResultAsync(idCalculation, idOrder, null);
        }
        
        public void GetFinishedOrderResultAsync(System.Guid idCalculation, System.Guid idOrder, object userState) {
            if ((this.onBeginGetFinishedOrderResultDelegate == null)) {
                this.onBeginGetFinishedOrderResultDelegate = new BeginOperationDelegate(this.OnBeginGetFinishedOrderResult);
            }
            if ((this.onEndGetFinishedOrderResultDelegate == null)) {
                this.onEndGetFinishedOrderResultDelegate = new EndOperationDelegate(this.OnEndGetFinishedOrderResult);
            }
            if ((this.onGetFinishedOrderResultCompletedDelegate == null)) {
                this.onGetFinishedOrderResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFinishedOrderResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetFinishedOrderResultDelegate, new object[] {
                        idCalculation,
                        idOrder}, this.onEndGetFinishedOrderResultDelegate, this.onGetFinishedOrderResultCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetWaitingOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWaitingOrdersForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ModernClient.WCFCommunicator.IWCFCommunicator.EndGetWaitingOrdersForRemoteCalculation(System.IAsyncResult result) {
            return base.Channel.EndGetWaitingOrdersForRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginGetWaitingOrdersForRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetWaitingOrdersForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        private object[] OnEndGetWaitingOrdersForRemoteCalculation(System.IAsyncResult result) {
            int retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetWaitingOrdersForRemoteCalculation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWaitingOrdersForRemoteCalculationCompleted(object state) {
            if ((this.GetWaitingOrdersForRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWaitingOrdersForRemoteCalculationCompleted(this, new GetWaitingOrdersForRemoteCalculationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWaitingOrdersForRemoteCalculationAsync(System.Guid idCalculation) {
            this.GetWaitingOrdersForRemoteCalculationAsync(idCalculation, null);
        }
        
        public void GetWaitingOrdersForRemoteCalculationAsync(System.Guid idCalculation, object userState) {
            if ((this.onBeginGetWaitingOrdersForRemoteCalculationDelegate == null)) {
                this.onBeginGetWaitingOrdersForRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginGetWaitingOrdersForRemoteCalculation);
            }
            if ((this.onEndGetWaitingOrdersForRemoteCalculationDelegate == null)) {
                this.onEndGetWaitingOrdersForRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndGetWaitingOrdersForRemoteCalculation);
            }
            if ((this.onGetWaitingOrdersForRemoteCalculationCompletedDelegate == null)) {
                this.onGetWaitingOrdersForRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWaitingOrdersForRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginGetWaitingOrdersForRemoteCalculationDelegate, new object[] {
                        idCalculation}, this.onEndGetWaitingOrdersForRemoteCalculationDelegate, this.onGetWaitingOrdersForRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetFinishedOrdersCountForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFinishedOrdersCountForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ModernClient.WCFCommunicator.IWCFCommunicator.EndGetFinishedOrdersCountForRemoteCalculation(System.IAsyncResult result) {
            return base.Channel.EndGetFinishedOrdersCountForRemoteCalculation(result);
        }
        
        private System.IAsyncResult OnBeginGetFinishedOrdersCountForRemoteCalculation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid idCalculation = ((System.Guid)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetFinishedOrdersCountForRemoteCalculation(idCalculation, callback, asyncState);
        }
        
        private object[] OnEndGetFinishedOrdersCountForRemoteCalculation(System.IAsyncResult result) {
            int retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetFinishedOrdersCountForRemoteCalculation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFinishedOrdersCountForRemoteCalculationCompleted(object state) {
            if ((this.GetFinishedOrdersCountForRemoteCalculationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFinishedOrdersCountForRemoteCalculationCompleted(this, new GetFinishedOrdersCountForRemoteCalculationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFinishedOrdersCountForRemoteCalculationAsync(System.Guid idCalculation) {
            this.GetFinishedOrdersCountForRemoteCalculationAsync(idCalculation, null);
        }
        
        public void GetFinishedOrdersCountForRemoteCalculationAsync(System.Guid idCalculation, object userState) {
            if ((this.onBeginGetFinishedOrdersCountForRemoteCalculationDelegate == null)) {
                this.onBeginGetFinishedOrdersCountForRemoteCalculationDelegate = new BeginOperationDelegate(this.OnBeginGetFinishedOrdersCountForRemoteCalculation);
            }
            if ((this.onEndGetFinishedOrdersCountForRemoteCalculationDelegate == null)) {
                this.onEndGetFinishedOrdersCountForRemoteCalculationDelegate = new EndOperationDelegate(this.OnEndGetFinishedOrdersCountForRemoteCalculation);
            }
            if ((this.onGetFinishedOrdersCountForRemoteCalculationCompletedDelegate == null)) {
                this.onGetFinishedOrdersCountForRemoteCalculationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFinishedOrdersCountForRemoteCalculationCompleted);
            }
            base.InvokeAsync(this.onBeginGetFinishedOrdersCountForRemoteCalculationDelegate, new object[] {
                        idCalculation}, this.onEndGetFinishedOrdersCountForRemoteCalculationDelegate, this.onGetFinishedOrdersCountForRemoteCalculationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ModernClient.WCFCommunicator.IWCFCommunicator.BeginGetStrategyParametersDescription(string strategyName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStrategyParametersDescription(strategyName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> ModernClient.WCFCommunicator.IWCFCommunicator.EndGetStrategyParametersDescription(System.IAsyncResult result) {
            return base.Channel.EndGetStrategyParametersDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetStrategyParametersDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strategyName = ((string)(inValues[0]));
            return ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).BeginGetStrategyParametersDescription(strategyName, callback, asyncState);
        }
        
        private object[] OnEndGetStrategyParametersDescription(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((ModernClient.WCFCommunicator.IWCFCommunicator)(this)).EndGetStrategyParametersDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStrategyParametersDescriptionCompleted(object state) {
            if ((this.GetStrategyParametersDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStrategyParametersDescriptionCompleted(this, new GetStrategyParametersDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStrategyParametersDescriptionAsync(string strategyName) {
            this.GetStrategyParametersDescriptionAsync(strategyName, null);
        }
        
        public void GetStrategyParametersDescriptionAsync(string strategyName, object userState) {
            if ((this.onBeginGetStrategyParametersDescriptionDelegate == null)) {
                this.onBeginGetStrategyParametersDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetStrategyParametersDescription);
            }
            if ((this.onEndGetStrategyParametersDescriptionDelegate == null)) {
                this.onEndGetStrategyParametersDescriptionDelegate = new EndOperationDelegate(this.OnEndGetStrategyParametersDescription);
            }
            if ((this.onGetStrategyParametersDescriptionCompletedDelegate == null)) {
                this.onGetStrategyParametersDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStrategyParametersDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetStrategyParametersDescriptionDelegate, new object[] {
                        strategyName}, this.onEndGetStrategyParametersDescriptionDelegate, this.onGetStrategyParametersDescriptionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ModernClient.WCFCommunicator.IWCFCommunicator CreateChannel() {
            return new WCFCommunicatorClientChannel(this);
        }
        
        private class WCFCommunicatorClientChannel : ChannelBase<ModernClient.WCFCommunicator.IWCFCommunicator>, ModernClient.WCFCommunicator.IWCFCommunicator {
            
            public WCFCommunicatorClientChannel(System.ServiceModel.ClientBase<ModernClient.WCFCommunicator.IWCFCommunicator> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetActualizedInstruments(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetActualizedInstruments", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> EndGetActualizedInstruments(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument> _result = ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.ActualizedInstrument>)(base.EndInvoke("GetActualizedInstruments", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAvaliableStrategies(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAvaliableStrategies", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetAvaliableStrategies(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetAvaliableStrategies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRemoteCalculationsInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRemoteCalculationsInfo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> EndGetRemoteCalculationsInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.RemoteCalculationInfo>)(base.EndInvoke("GetRemoteCalculationsInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddRemoteCalculation(string name, string strategyName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = strategyName;
                System.IAsyncResult _result = base.BeginInvoke("AddRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public ModernClient.WCFCommunicator.RemoteCalculationInfo EndAddRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                ModernClient.WCFCommunicator.RemoteCalculationInfo _result = ((ModernClient.WCFCommunicator.RemoteCalculationInfo)(base.EndInvoke("AddRemoteCalculation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveRemoteCalculation", _args, result);
            }
            
            public System.IAsyncResult BeginAddOrderToRemoteCalulation(System.Guid idCalculation, string insName, System.DateTime dateFrom, System.DateTime dateTo, ModernClient.WCFCommunicator.TimePeriods period, System.Collections.ObjectModel.ObservableCollection<float> parameters, float stopLoss, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = idCalculation;
                _args[1] = insName;
                _args[2] = dateFrom;
                _args[3] = dateTo;
                _args[4] = period;
                _args[5] = parameters;
                _args[6] = stopLoss;
                System.IAsyncResult _result = base.BeginInvoke("AddOrderToRemoteCalulation", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddOrderToRemoteCalulation(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddOrderToRemoteCalulation", _args, result);
            }
            
            public System.IAsyncResult BeginStartRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = idCalculation;
                System.IAsyncResult _result = base.BeginInvoke("StartRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartRemoteCalculation", _args, result);
            }
            
            public System.IAsyncResult BeginStopRemoteCalculation(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("StopRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStopRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StopRemoteCalculation", _args, result);
            }
            
            public System.IAsyncResult BeginGetFinishedOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = idCalculation;
                System.IAsyncResult _result = base.BeginInvoke("GetFinishedOrdersForRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> EndGetFinishedOrdersForRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder> _result = ((System.Collections.ObjectModel.ObservableCollection<ModernClient.WCFCommunicator.CalculationOrder>)(base.EndInvoke("GetFinishedOrdersForRemoteCalculation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFinishedOrderResult(System.Guid idCalculation, System.Guid idOrder, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = idCalculation;
                _args[1] = idOrder;
                System.IAsyncResult _result = base.BeginInvoke("GetFinishedOrderResult", _args, callback, asyncState);
                return _result;
            }
            
            public ModernClient.WCFCommunicator.CalculationResult EndGetFinishedOrderResult(System.IAsyncResult result) {
                object[] _args = new object[0];
                ModernClient.WCFCommunicator.CalculationResult _result = ((ModernClient.WCFCommunicator.CalculationResult)(base.EndInvoke("GetFinishedOrderResult", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWaitingOrdersForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = idCalculation;
                System.IAsyncResult _result = base.BeginInvoke("GetWaitingOrdersForRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetWaitingOrdersForRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetWaitingOrdersForRemoteCalculation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFinishedOrdersCountForRemoteCalculation(System.Guid idCalculation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = idCalculation;
                System.IAsyncResult _result = base.BeginInvoke("GetFinishedOrdersCountForRemoteCalculation", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetFinishedOrdersCountForRemoteCalculation(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetFinishedOrdersCountForRemoteCalculation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStrategyParametersDescription(string strategyName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = strategyName;
                System.IAsyncResult _result = base.BeginInvoke("GetStrategyParametersDescription", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetStrategyParametersDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetStrategyParametersDescription", _args, result)));
                return _result;
            }
        }
    }
}
